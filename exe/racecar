#!/usr/bin/env ruby

require "optparse"
require "racecar"

parser = OptionParser.new do |opts|
  opts.banner = "Usage: racecar MyConsumer [options]"

  opts.on("-r", "--require LIBRARY", "Require the LIBRARY before starting the consumer") do |lib|
    require lib
  end

  opts.on_tail("--version", "Show Racecar version") do
    require "racecar/version"
    puts "Racecar #{Racecar::VERSION}"
    exit
  end
end

parser.parse!(ARGV)

consumer_name = ARGV.first or raise "No consumer specified"
config_file = "config/racecar.yml"

puts "=> Starting Racecar consumer #{consumer_name}..."

if defined?(Rails)
  puts "=> Booting Rails application..."

  require_relative "../config/environment"

  Racecar.config.load_file(config_file, Rails.env)

  if Racecar.config.log_to_stdout
    # Write to STDOUT as well as to the log file.
    console = ActiveSupport::Logger.new($stdout)
    console.formatter = Rails.logger.formatter
    console.level = Rails.logger.level
    Rails.logger.extend(ActiveSupport::Logger.broadcast(console))
  end

  Racecar.logger = Rails.logger
end

# Find the consumer class by name.
consumer_class = Kernel.const_get(consumer_name)

Racecar.config.group_id = consumer_class.group_id

Racecar.config.group_id ||= [
  # Configurable and optional prefix:
  Racecar.config.group_id_prefix,

  # MyFunnyConsumer => my-funny-consumer
  consumer_class.name.gsub(/[a-z][A-Z]/) {|str| str[0] << "-" << str[1] }.downcase,
].compact.join("")

Racecar.config.subscriptions = consumer_class.subscriptions
Racecar.config.max_wait_time = consumer_class.max_wait_time unless consumer_class.max_wait_time.nil?

Racecar.config.validate!

puts "=> Wrooooom!"
puts "=> Ctrl-C to shutdown consumer"

processor = consumer_class.new

Racecar.run(processor)

puts "=> Shut down"
